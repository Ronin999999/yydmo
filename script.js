document.addEventListener('DOMContentLoaded', () => {
  // –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  let balance = parseFloat(localStorage.getItem('minesBalance')) || 45189.51;
  let currentBet = 16;
  const minesCount = 3;
  const maxWin = 35144;
  let gameActive = false;
  let minesPositions = [];
  let revealedCells = 0;
  let cashoutMultiplier = 1;

  // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
  const balanceButton = document.getElementById('balanceButton');
  const depositModal = document.getElementById('depositModal');
  const depositInput = document.getElementById('depositInput');
  const confirmDeposit = document.getElementById('confirmDeposit');
  const cancelDeposit = document.getElementById('cancelDeposit');
  const betAmount = document.getElementById('betAmount');
  const playButton = document.getElementById('playButton');
  const gameGrid = document.getElementById('gameGrid');
  const helpButton = document.querySelector('.help-button');

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
  function initGame() {
    updateBalance();
    createGrid();
    setupEventListeners();
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Ç–∫–∏
  function createGrid() {
    gameGrid.innerHTML = '';
    for (let i = 0; i < 25; i++) {
      const cell = document.createElement('div');
      cell.className = 'grid-cell';
      cell.dataset.index = i;
      cell.textContent = '?';
      gameGrid.appendChild(cell);
    }
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
  function setupEventListeners() {
    // –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    balanceButton.addEventListener('click', () => {
      depositModal.style.display = 'flex';
      depositInput.focus();
    });

    confirmDeposit.addEventListener('click', () => {
      const amount = parseFloat(depositInput.value);
      if (amount > 0) {
        balance += amount;
        updateBalance();
        saveBalance();
        depositModal.style.display = 'none';
        depositInput.value = '';
      }
    });

    cancelDeposit.addEventListener('click', () => {
      depositModal.style.display = 'none';
      depositInput.value = '';
    });

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
    betAmount.addEventListener('change', (e) => {
      currentBet = parseInt(e.target.value) || 16;
    });

    // –ö–Ω–æ–ø–∫–∞ –∏–≥—Ä—ã
    playButton.addEventListener('click', () => {
      if (gameActive) {
        cashout();
      } else {
        startGame();
      }
    });

    // –ü–æ–º–æ—â—å
    helpButton.addEventListener('click', () => {
      alert('–û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –∫–ª–µ—Ç–∫–∏, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –º–Ω–æ–∂–∏—Ç–µ–ª—å –≤—ã–∏–≥—Ä—ã—à–∞. –ó–∞–±–µ—Ä–∏—Ç–µ –≤—ã–∏–≥—Ä—ã—à –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –æ—Ç–∫—Ä–æ–µ—Ç–µ –º–∏–Ω—É!');
    });
  }

  // –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
  function startGame() {
    if (balance < currentBet) {
      alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ');
      return;
    }

    balance -= currentBet;
    updateBalance();
    saveBalance();
    
    gameActive = true;
    revealedCells = 0;
    cashoutMultiplier = 1;
    minesPositions = [];
    playButton.textContent = '–ó–∞–±—Ä–∞—Ç—å';
    
    // –û—á–∏—â–∞–µ–º —Å–µ—Ç–∫—É
    const cells = document.querySelectorAll('.grid-cell');
    cells.forEach(cell => {
      cell.className = 'grid-cell';
      cell.textContent = '?';
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–ª–µ—Ç–∫–µ
  gameGrid.addEventListener('click', (e) => {
    if (!gameActive) return;
    
    const cell = e.target.closest('.grid-cell');
    if (!cell || cell.classList.contains('revealed')) return;
    
    const index = parseInt(cell.dataset.index);
    
    // –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∫–ª–∏–∫–µ —Ä–∞–∑–º–µ—â–∞–µ–º –º–∏–Ω—ã (–∏—Å–∫–ª—é—á–∞—è –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–ª–µ—Ç–∫—É)
    if (minesPositions.length === 0) {
      placeMines(index);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∏–Ω–∞ –≤ –∫–ª–µ—Ç–∫–µ
    if (minesPositions.includes(index)) {
      // –í —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ –º–∏–Ω—ã –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è - –∏–≥—Ä–∞ –±–µ—Å–ø—Ä–æ–∏–≥—Ä—ã—à–Ω–∞—è
      return;
    }
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–ª–µ—Ç–∫—É
    revealCell(cell);
  });

  // –†–∞–∑–º–µ—â–µ–Ω–∏–µ –º–∏–Ω
  function placeMines(firstClickIndex) {
    minesPositions = [];
    
    while (minesPositions.length < minesCount) {
      const randomIndex = Math.floor(Math.random() * 25);
      if (randomIndex !== firstClickIndex && !minesPositions.includes(randomIndex)) {
        minesPositions.push(randomIndex);
      }
    }
  }

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–ª–µ—Ç–∫–∏
  function revealCell(cell) {
    cell.classList.add('revealed');
    cell.textContent = 'üí∞';
    revealedCells++;
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å
    cashoutMultiplier = 1 + (revealedCells * 0.5);
  }

  // –ó–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à
  function cashout() {
    const winAmount = currentBet * cashoutMultiplier;
    balance += winAmount;
    updateBalance();
    saveBalance();
    
    gameActive = false;
    playButton.textContent = '–ò–≥—Ä–∞—Ç—å';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
    revealMines();
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –º–∏–Ω—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
  function revealMines() {
    minesPositions.forEach(index => {
      const cell = document.querySelector(`.grid-cell[data-index="${index}"]`);
      if (!cell.classList.contains('revealed')) {
        cell.classList.add('mine');
        cell.textContent = 'üí£';
      }
    });
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
  function updateBalance() {
    balanceButton.textContent = balance.toLocaleString('ru-RU', {
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    }) + ' ‚ÇΩ';
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
  function saveBalance() {
    localStorage.setItem('minesBalance', balance.toString());
  }

  // –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
  initGame();
});